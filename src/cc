#!/usr/bin/env python

import itertools

def tokenize(lines):
    return [(line.split(), line) for line in lines]

def parse(line):
    errors   = []
    warnings = []
    if len(line) > 0:
        operator = line[0]
        rest     = line[1:]
    return errors, warnings

def cozycompile(all_warnings, f):
    '''Returns a structure of the following format:
    {
        errors   : [string],
        warnings : [string],
        actions  : [void(void)]
    }
    '''
    tokens = tokenize(f)

    errors   = []
    warnings = []

    for line, original_line in tokens:
        e, w = parse(line, original_line)
        errors   += e
        warnings += w

def cozylink(objects):
    pass

def read_files(files):
    in_memory_files = []
    for f in files:
        open_file = open(f)
        in_memory_files.append([line.rstrip('\n') for line in open_file])
    return in_memory_files

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Cozy Compiler v.1.0.1.')
    parser.add_argument('files', metavar='F', nargs='+',
                         help='files.')
    parser.add_argument('-Wall')
    parser.add_argument('-o', nargs='?', help="out.", default='cozy.out')
    args = parser.parse_args()

    files = read_files(args.files)

    results = [cozycompile(args.Wall, f) for f in files]

    cozylink(results)

if __name__ == "__main__":
    main()
